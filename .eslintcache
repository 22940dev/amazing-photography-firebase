[{"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\index.js":"1","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\App.js":"2","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Login.js":"3","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Home.js":"4","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\context\\AuthContext.js":"5","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\firebase\\index.js":"6","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\context\\MainContext.js":"7","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Pics.js":"8","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Create.js":"9","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\UploadImage.js":"10","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Albums.js":"11","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Album.js":"12","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Update.js":"13","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Albumreview.js":"14","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\hooks\\usePics.js":"15","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Register.js":"16","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\EditTitle.js":"17"},{"size":472,"mtime":1612125897193,"results":"18","hashOfConfig":"19"},{"size":3675,"mtime":1619380358959,"results":"20","hashOfConfig":"19"},{"size":1849,"mtime":1619426937916,"results":"21","hashOfConfig":"19"},{"size":822,"mtime":1610585088939,"results":"22","hashOfConfig":"19"},{"size":1715,"mtime":1617544714045,"results":"23","hashOfConfig":"19"},{"size":923,"mtime":1613915861786,"results":"24","hashOfConfig":"19"},{"size":3287,"mtime":1619272304212,"results":"25","hashOfConfig":"19"},{"size":4605,"mtime":1619380293515,"results":"26","hashOfConfig":"19"},{"size":4489,"mtime":1619366734960,"results":"27","hashOfConfig":"19"},{"size":3022,"mtime":1619379812325,"results":"28","hashOfConfig":"19"},{"size":3585,"mtime":1619423836668,"results":"29","hashOfConfig":"19"},{"size":3395,"mtime":1619379520985,"results":"30","hashOfConfig":"19"},{"size":5272,"mtime":1619478869966,"results":"31","hashOfConfig":"19"},{"size":6779,"mtime":1619381017570,"results":"32","hashOfConfig":"19"},{"size":533,"mtime":1610629614273,"results":"33","hashOfConfig":"19"},{"size":1903,"mtime":1619426951890,"results":"34","hashOfConfig":"19"},{"size":3050,"mtime":1619479109348,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"10t8fe1",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\index.js",[],["80","81"],"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\App.js",[],"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Login.js",[],"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Home.js",[],"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\context\\AuthContext.js",["82"],"import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { auth } from \"../firebase\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\nimport { useMainContext } from \"./MainContext\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nconst AuthContextProvider = (props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const { setUser } = useMainContext();\r\n\r\n  const login = (email, password) => {\r\n    return auth.signInWithEmailAndPassword(email, password);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(\"\");\r\n    return auth.signOut();\r\n  };\r\n\r\n  const register = (email, password) => {\r\n    return auth.createUserWithEmailAndPassword(email, password);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      // auth state changed (by a user either logging in or out)\r\n      if (user) {\r\n        setUser(user);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const contextValues = {\r\n    loading,\r\n    login,\r\n    logout,\r\n    register,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValues}>\r\n      {loading && (\r\n        <div className=\"d-flex justify-content-center my-5\">\r\n          <Button variant=\"primary\" disabled>\r\n            <Spinner\r\n              as=\"span\"\r\n              animation=\"grow\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            />\r\n            Loading...\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {!loading && props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext, useAuth, AuthContextProvider as default };\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\firebase\\index.js",[],"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\context\\MainContext.js",["83","84","85"],"import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\nconst MainContext = createContext();\r\n\r\nconst useMainContext = () => {\r\n  return useContext(MainContext);\r\n};\r\n\r\nconst MainContextProvider = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [user, setUser] = useState(\"\");\r\n  const [allPicsInDb, setAllPics] = useState();\r\n  const [allAlbums, setAlbums] = useState();\r\n  const [currentAlbum, setCurrentAlbum] = useState(\"\");\r\n  const [albumPics, setAlbumPics] = useState([]);\r\n  const [clientAlbum, setClientAlbum] = useState({});\r\n\r\n  const resetPicsSelection = () => {\r\n    const allPics = [...allPicsInDb];\r\n    allPics.map((picture) => (picture.selected = false));\r\n\r\n    db.collection(\"pics\")\r\n      .doc(\"all-pics\")\r\n      .set({ ...allPics })\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n  const contextValues = {\r\n    setUser,\r\n    user,\r\n    allPicsInDb,\r\n    setAllPics,\r\n    allAlbums,\r\n    resetPicsSelection,\r\n    setCurrentAlbum,\r\n    currentAlbum,\r\n    albumPics,\r\n    setAlbumPics,\r\n    clientAlbum,\r\n    setClientAlbum,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    let picsInAlbum = [];\r\n    setAlbumPics([]);\r\n    if (currentAlbum && currentAlbum.photo_urls) {\r\n      picsInAlbum = currentAlbum.photo_urls.map((photo) => photo);\r\n\r\n      if (picsInAlbum.length) {\r\n        let emptyArr;\r\n        emptyArr = [];\r\n        allPicsInDb.map((pic) => {\r\n          picsInAlbum.map((albumPic) => {\r\n            if (albumPic === pic.url) {\r\n              pic.selected = true;\r\n              emptyArr.push(pic);\r\n            }\r\n          });\r\n        });\r\n        if (emptyArr.length) {\r\n          console.log(emptyArr);\r\n          setAlbumPics(emptyArr);\r\n        }\r\n\r\n        emptyArr = [];\r\n      }\r\n    }\r\n  }, [currentAlbum]);\r\n\r\n  useEffect(() => {\r\n    let snapshotPics;\r\n    let snapshotAlbums;\r\n\r\n    db.collection(`pics`).onSnapshot((querySnapshot) => {\r\n      snapshotPics = [];\r\n\r\n      querySnapshot.forEach((doc) => {\r\n        snapshotPics.push(doc.data());\r\n      });\r\n      setAllPics(Object.values(...snapshotPics));\r\n    });\r\n\r\n    db.collection(`albums`).onSnapshot((querySnapshot) => {\r\n      snapshotAlbums = [];\r\n\r\n      querySnapshot.forEach((doc) => {\r\n        snapshotAlbums.push(doc.data());\r\n      });\r\n      setAlbums(snapshotAlbums);\r\n    });\r\n\r\n    return setAllPics();\r\n  }, []);\r\n\r\n  return (\r\n    <MainContext.Provider value={contextValues}>\r\n      {loading && (\r\n        <div className=\"d-flex justify-content-center my-5\">\r\n          <Button variant=\"primary\" disabled>\r\n            <Spinner\r\n              as=\"span\"\r\n              animation=\"grow\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            />\r\n            Loading...\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {!loading && props.children}\r\n    </MainContext.Provider>\r\n  );\r\n};\r\n\r\nexport { MainContext, useMainContext, MainContextProvider as default };\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Pics.js",["86","87","88","89"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { db } from \"../firebase/index\";\r\nimport { useMainContext } from \"../context/MainContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { SRLWrapper } from \"simple-react-lightbox\";\r\nimport { Container, Row, Card, Media, Alert, Button } from \"react-bootstrap\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport IndeterminateCheckBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\r\n\r\nconst options = {\r\n  buttons: {\r\n    backgroundColor: \"rgba(140, 94, 88, 0.8)\",\r\n    iconColor: \"rgba(241, 191, 152, 0.7)\",\r\n  },\r\n  settings: {\r\n    overlayColor: \"rgba(255, 237, 225, 1)\",\r\n    transitionSpeed: 1000,\r\n    transitionTimingFunction: \"linear\",\r\n  },\r\n  thumbnails: {\r\n    thumbnailsSize: [\"120px\", \"100px\"],\r\n    thumbnailsOpacity: 0.4,\r\n  },\r\n  caption: {\r\n    captionColor: \"rgba(241, 191, 152, 1)\",\r\n  },\r\n  progressBar: {\r\n    size: \"4px\",\r\n    backgroundColor: \"rgba(255, 237, 225, 1)\",\r\n    fillColor: \"#AF9AB2\",\r\n  },\r\n};\r\n\r\nconst Pics = () => {\r\n  const [picsLoaded, setLoaded] = useState(false);\r\n  const {\r\n    setAllPics,\r\n    allPicsInDb,\r\n    resetPicsSelection,\r\n    user,\r\n  } = useMainContext();\r\n  const allPicsFix = useRef([]);\r\n  const navigate = useNavigate();\r\n\r\n  const selectPic = (pic) => {\r\n    allPicsFix.current.map((picture) => {\r\n      if (picture.url === pic) {\r\n        return (picture.selected = true);\r\n      }\r\n    });\r\n\r\n    db.collection(\"pics\")\r\n      .doc(\"all-pics\")\r\n      .set({ ...allPicsFix.current })\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n\r\n  const deleteSelection = (pic) => {\r\n    allPicsFix.current.map((picture) => {\r\n      if (picture.url === pic) {\r\n        console.log({ ...allPicsFix.current });\r\n        return (picture.selected = false);\r\n      }\r\n    });\r\n    db.collection(\"pics\")\r\n      .doc(\"all-pics\")\r\n      .set({ ...allPicsFix.current })\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n\r\n  const createAlbum = (e) => {\r\n    e.preventDefault();\r\n    setAllPics(allPicsFix.current);\r\n    navigate(\"/albums/create\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allPicsInDb && allPicsInDb.length) {\r\n      allPicsFix.current = [...allPicsInDb];\r\n\r\n      setLoaded(true);\r\n    }\r\n  }, [allPicsInDb]);\r\n\r\n  useEffect(() => {\r\n    if (allPicsInDb && allPicsInDb.length) {\r\n      resetPicsSelection();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Alert variant=\"info\">\r\n        Here you can see your pics... or upload new pics if you havent any\r\n      </Alert>\r\n      <Container>\r\n        <SRLWrapper options={options}>\r\n          <Row lg={9} md={10} className=\"d-flex mt-5 mx-auto\">\r\n            {picsLoaded &&\r\n              allPicsFix.current &&\r\n              allPicsFix.current.map((pic, index) => {\r\n                if (pic.user === user.email) {\r\n                  return (\r\n                    <Card\r\n                      className={\r\n                        pic.selected\r\n                          ? \"pic-selected ml-3 mb-3\"\r\n                          : \"not-selected ml-3 mb-3\"\r\n                      }\r\n                      id=\"media\"\r\n                      key={index}\r\n                    >\r\n                      <Media key={pic.id} className=\"pic my-auto\">\r\n                        <img\r\n                          width=\"100%\"\r\n                          height=\"auto\"\r\n                          src={pic.url}\r\n                          alt=\"Generic placeholder\"\r\n                        />\r\n                      </Media>\r\n                      <div className=\"d-flex mx-auto my-2\">\r\n                        <AddCircleOutlineIcon\r\n                          onClick={() => selectPic(pic.url)}\r\n                          color=\"primary\"\r\n                        />\r\n                        <IndeterminateCheckBoxIcon\r\n                          onClick={() => deleteSelection(pic.url)}\r\n                          color=\"secondary\"\r\n                        />\r\n                      </div>\r\n                    </Card>\r\n                  );\r\n                }\r\n              })}\r\n          </Row>\r\n        </SRLWrapper>\r\n      </Container>\r\n      <Button onClick={createAlbum} className=\"my-5\" variant=\"primary\">\r\n        Create From Selection / Upload\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pics;\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Create.js",["90"],"import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Col,\r\n  Alert,\r\n  Card,\r\n  Media,\r\n} from \"react-bootstrap\";\r\nimport { db } from \"../firebase/index\";\r\nimport { useMainContext } from \"../context/MainContext\";\r\nimport UploadImage from \"./UploadImage\";\r\nimport \"../App.css\";\r\n\r\nconst Create = () => {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [albumName, setAlbumName] = useState(\"\");\r\n  const { allPicsInDb, user, resetPicsSelection } = useMainContext();\r\n  const [file, setFile] = useState(false);\r\n  const [code, setCode] = useState(\"\");\r\n\r\n  const setName = (e) => {\r\n    setAlbumName(e.target.value);\r\n  };\r\n\r\n  const confirmFile = (message) => {\r\n    if (message === true) {\r\n      setFile(false);\r\n    } else {\r\n      setFile(true);\r\n    }\r\n  };\r\n\r\n  const createAlbum = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const selected = allPicsInDb.filter((pic) => pic.selected === true);\r\n\r\n    if (!selected.length) {\r\n      alert(\"You need to upload or select at least 1 pic\");\r\n      return;\r\n    } else {\r\n      const truthy = allPicsInDb.filter((pic) => pic.selected === true);\r\n      const urls = truthy.map((pic) => pic.url);\r\n      let ranNum;\r\n      ranNum = Math.floor(Math.random() * 10000000);\r\n      await db\r\n        .collection(\"albums\")\r\n        .doc()\r\n        .set({\r\n          title: albumName.toLowerCase(),\r\n          cust_approved: false,\r\n          url: Math.floor(Math.random() * 200).toString(),\r\n          photo_urls: [...urls],\r\n          code: ranNum,\r\n          user: user.email,\r\n        })\r\n        .then(function () {\r\n          console.log(\"Document successfully written!\");\r\n          setLoaded(false);\r\n          setCode(ranNum);\r\n          resetPicsSelection();\r\n        })\r\n        .catch(function (error) {\r\n          console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allPicsInDb && allPicsInDb.length) {\r\n      setLoaded(true);\r\n    }\r\n  }, [allPicsInDb]);\r\n\r\n  return (\r\n    <>\r\n      {!code && loaded && allPicsInDb && (\r\n        <Container>\r\n          <Col lg={10} className=\"my-5 pt-5 mx-auto\">\r\n            <Form className=\"mx-auto form px-5 py-5\" onSubmit={createAlbum}>\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h2>CREATE YOUR ALBUM</h2>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className=\"my-3\"\r\n                  type=\"text\"\r\n                  placeholder=\"Set an album name\"\r\n                  onChange={setName}\r\n                  required\r\n                />\r\n                <Col lg={12} md={10} className=\"d-flex flex-wrap\">\r\n                  {allPicsInDb &&\r\n                    allPicsInDb.map((pic, index) => {\r\n                      if (pic.selected === true && pic.user === user.email) {\r\n                        return (\r\n                          <Card className=\"ml-3\" id=\"media\" key={index}>\r\n                            <Media key={pic.id} className=\"my-auto\">\r\n                              <img\r\n                                width=\"100%\"\r\n                                height=\"auto\"\r\n                                src={pic.url}\r\n                                alt=\"Generic placeholder\"\r\n                              />\r\n                            </Media>\r\n                          </Card>\r\n                        );\r\n                      }\r\n                    })}\r\n                </Col>\r\n                <UploadImage albumName={albumName} setErrorMsg={confirmFile} />\r\n                <Button className=\"mt-0\" variant=\"primary\" type=\"submit\">\r\n                  Confirm\r\n                </Button>\r\n              </Form.Group>\r\n            </Form>\r\n            {!file && (\r\n              <Alert variant=\"warning\">You haven´t uploaded any pics</Alert>\r\n            )}\r\n          </Col>\r\n        </Container>\r\n      )}\r\n      {code && (\r\n        <Alert variant=\"success\">\r\n          <h2>Album succesfully created!</h2>\r\n          <div>\r\n            The album code for your customer is (copy this link){\" \"}\r\n            <p>\r\n              <a href={`/review/${code}`}>\r\n                <strong>photography.catala-sverdrup.se/review/{code}</strong>\r\n              </a>\r\n            </p>\r\n            <Link to=\"/albums\">\r\n              <p>Go back to albums</p>\r\n            </Link>\r\n          </div>\r\n        </Alert>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\UploadImage.js",["91","92","93","94"],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport { db, storage } from \"../firebase/index\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { useMainContext } from \"../context/MainContext\";\r\n\r\nconst UploadImage = ({ albumName, setErrorMsg }) => {\r\n  const [error, setError] = useState(null);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [file, setFile] = useState(\"\");\r\n  const { allPicsInDb, user } = useMainContext();\r\n\r\n  useEffect(() => {\r\n    setErrorMsg(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      setErrorMsg(true);\r\n      setError(true);\r\n      setIsSuccess(false);\r\n\r\n      return;\r\n    }\r\n\r\n    //This is basically cause' we need a title for uploading a pic with album name - reference in all-pics collection\r\n    if (!albumName) {\r\n      alert(\"You need to set first an album name\");\r\n      return;\r\n    }\r\n\r\n    // reset environment\r\n    setError(null);\r\n    setErrorMsg(false);\r\n    setIsSuccess(false);\r\n\r\n    // get file reference\r\n    const fileRef = storage.ref(`allPics/${file.name}`);\r\n\r\n    // upload file to fileRef\r\n    const uploadTask = fileRef.put(file);\r\n\r\n    // are we there yet?\r\n    uploadTask.then((snapshot) => {\r\n      // retrieve URL to uploaded file\r\n      snapshot.ref.getDownloadURL().then((url) => {\r\n        // add uploaded file to db\r\n        if (url) {\r\n          let allPics = { ...allPicsInDb };\r\n          let ranNum = Math.floor(Math.random() * 1000);\r\n\r\n          db.collection(\"pics\")\r\n            .doc(\"all-pics\")\r\n            .set({\r\n              ...allPics,\r\n              ranNum: {\r\n                id: ranNum,\r\n                url: url,\r\n                albums: [`${albumName.toLowerCase()}`],\r\n                selected: true,\r\n                user: user.email,\r\n              },\r\n            })\r\n            .then(function () {\r\n              console.log(\"Document successfully written!\");\r\n            })\r\n            .catch(function (error) {\r\n              console.error(\"Error writing document: \", error);\r\n            });\r\n        }\r\n      });\r\n    });\r\n  }, [file]);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    //Allow only uploding 1 pic at a time\r\n    if (acceptedFiles.length > 1) {\r\n      alert(\"Upload only one doc at a time, thanks\");\r\n      return;\r\n    }\r\n\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader();\r\n\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        setFile(file);\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div className=\"upload-dropzone mx-auto my-5\" {...getRootProps()}>\r\n      <input {...getInputProps()} />\r\n      <p id=\"drag-text\">\r\n        Drag 'n' drop some files here, or click to select files -One at a time-\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadImage;\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Albums.js",["95","96","97","98","99"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { db } from \"../firebase/index\";\r\nimport { useMainContext } from \"../context/MainContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { Container, Row, Card, Media, Alert } from \"react-bootstrap\";\r\n\r\nconst Albums = () => {\r\n  const [albumsLoaded, setLoaded] = useState(false);\r\n  const {\r\n    allAlbums,\r\n    setCurrentAlbum,\r\n    user,\r\n    resetPicsSelection,\r\n    allPicsInDb,\r\n  } = useMainContext();\r\n  const allAlbumsFix = useRef([]);\r\n  const [userAlbums, setUserAlbums] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const selectPicsFromAlb = (alb) => {\r\n    alb.photo_urls.map((url) =>\r\n      allPicsInDb.map((pic) => {\r\n        if (pic.url == url) {\r\n          pic.selected = true;\r\n        }\r\n      })\r\n    );\r\n\r\n    db.collection(\"pics\")\r\n      .doc(\"all-pics\")\r\n      .set({ ...allPicsInDb })\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n\r\n  const goToAlbum = (alb) => {\r\n    setCurrentAlbum(alb);\r\n    selectPicsFromAlb(alb);\r\n    setTimeout(() => {\r\n      navigate(`/albums/${alb.code}`);\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allAlbums && allAlbums.length) {\r\n      allAlbumsFix.current = [...allAlbums];\r\n      setCurrentAlbum(\"\");\r\n      resetPicsSelection();\r\n      setLoaded(true);\r\n    }\r\n  }, [allAlbums]);\r\n\r\n  useEffect(() => {\r\n    let userAlbs = allAlbumsFix.current.filter((alb) => {\r\n      return alb.user === user.email;\r\n    });\r\n    setUserAlbums(userAlbs);\r\n  }, [allAlbumsFix.current]);\r\n\r\n  return (\r\n    <>\r\n      {userAlbums.length === 0 && (\r\n        <Alert variant=\"warning\">\r\n          You havent got any albums yet. Go to pics and create your first album\r\n        </Alert>\r\n      )}\r\n      {userAlbums.length > 0 && (\r\n        <Alert variant=\"info\">\r\n          Click in your albums thumbnail to see your album pics ... or go to\r\n          pics and create an album\r\n        </Alert>\r\n      )}\r\n      <Container>\r\n        <Row lg={9} className=\"d-flex mt-5 mx-auto\">\r\n          {albumsLoaded &&\r\n            allAlbumsFix.current &&\r\n            allAlbumsFix.current.map((alb, index) => {\r\n              if (alb.user === user.email) {\r\n                return (\r\n                  <Card\r\n                    className=\"ml-3 shadow mb-3 py-3 photo w-25\"\r\n                    id=\"media\"\r\n                    key={index}\r\n                  >\r\n                    <Card.Text className=\"mt-2\">Album:</Card.Text>\r\n                    <h2>{alb.title.toUpperCase()}</h2>\r\n                    <Media\r\n                      key={alb.title}\r\n                      className=\"my-auto\"\r\n                      onClick={() => goToAlbum(alb)}\r\n                    >\r\n                      <img\r\n                        width=\"100%\"\r\n                        height=\"auto\"\r\n                        src={\r\n                          alb.photo_urls[0].url\r\n                            ? alb.photo_urls[0].url\r\n                            : alb.photo_urls[0]\r\n                        }\r\n                        alt=\"Generic placeholder\"\r\n                      />\r\n                      {alb.cust_approved === true && (\r\n                        <p className=\"custumer_approved\">Approved</p>\r\n                      )}\r\n                    </Media>\r\n                  </Card>\r\n                );\r\n              }\r\n            })}\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Albums;\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Album.js",["100"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { SRLWrapper } from \"simple-react-lightbox\";\r\nimport { useMainContext } from \"../context/MainContext\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport { Container, Row, Card, Alert, Media, Button } from \"react-bootstrap\";\r\n\r\nconst options = {\r\n  buttons: {\r\n    backgroundColor: \"rgba(140, 94, 88, 0.8)\",\r\n    iconColor: \"rgba(241, 191, 152, 0.7)\",\r\n  },\r\n  settings: {\r\n    overlayColor: \"rgba(255, 237, 225, 1)\",\r\n    transitionSpeed: 1000,\r\n    transitionTimingFunction: \"linear\",\r\n  },\r\n  thumbnails: {\r\n    thumbnailsSize: [\"120px\", \"100px\"],\r\n    thumbnailsOpacity: 0.4,\r\n  },\r\n  caption: {\r\n    captionColor: \"rgba(241, 191, 152, 1)\",\r\n  },\r\n  progressBar: {\r\n    size: \"4px\",\r\n    backgroundColor: \"rgba(255, 237, 225, 1)\",\r\n    fillColor: \"#AF9AB2\",\r\n  },\r\n};\r\n\r\nconst Album = () => {\r\n  const [picsLoaded, setLoaded] = useState(false);\r\n  const {\r\n    setAllPics,\r\n    allPicsInDb,\r\n    currentAlbum,\r\n    albumPics,\r\n    user,\r\n  } = useMainContext();\r\n  const allPicsFix = useRef([]);\r\n  const [thisAlbumFix, setAlbumFix] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const updateAlbum = (e) => {\r\n    e.preventDefault();\r\n    setAllPics(allPicsFix.current);\r\n    navigate(`/albums/${currentAlbum.code}/update`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (albumPics && albumPics.length) {\r\n      setAlbumFix([...albumPics]);\r\n      setLoaded(true);\r\n    }\r\n  }, [albumPics]);\r\n\r\n  useEffect(() => {\r\n    if (allPicsInDb && allPicsInDb.length) {\r\n      allPicsFix.current = [...allPicsInDb];\r\n\r\n      setLoaded(true);\r\n    }\r\n  }, [allPicsInDb]);\r\n\r\n  return (\r\n    <>\r\n      {currentAlbum && (\r\n        <Container className=\"mt-5 shadow rounded border border-dark\">\r\n          <h2 className=\"my-4\">{currentAlbum.title.toUpperCase()}</h2>\r\n          <Link to={`/albums/${currentAlbum.code}/edit-title`}>\r\n            <p>Edit title</p>\r\n          </Link>\r\n          <SRLWrapper options={options}>\r\n            <Row lg={9} className=\"d-flex mt-5 mx-auto\">\r\n              {picsLoaded &&\r\n                thisAlbumFix.length &&\r\n                thisAlbumFix.map((pic, index) => {\r\n                  if (pic.user === user.email) {\r\n                    return (\r\n                      <Card className=\"ml-3 mb-3\" id=\"media\" key={index}>\r\n                        <Media\r\n                          key={pic.id}\r\n                          className=\"pic shadow-lg my-auto border p-1\"\r\n                        >\r\n                          <img\r\n                            width=\"100%\"\r\n                            height=\"auto\"\r\n                            src={pic.url}\r\n                            alt=\"Generic placeholder\"\r\n                          />\r\n                        </Media>\r\n                      </Card>\r\n                    );\r\n                  }\r\n                })}\r\n            </Row>\r\n          </SRLWrapper>\r\n          <Button onClick={updateAlbum} className=\"my-3\" variant=\"primary\">\r\n            Update Album\r\n          </Button>\r\n        </Container>\r\n      )}\r\n      {!currentAlbum && (\r\n        <div>\r\n          <Alert variant=\"warning\">\r\n            Oops, something went wrong. Please go back to albums\r\n          </Alert>\r\n          <Link to=\"/albums\">\r\n            <p>Go back to albums</p>\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Album;\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Update.js",["101"],"import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Col,\r\n  Alert,\r\n  Card,\r\n  Media,\r\n} from \"react-bootstrap\";\r\nimport { db } from \"../firebase/index\";\r\nimport { useMainContext } from \"../context/MainContext\";\r\nimport UploadImage from \"./UploadImage\";\r\nimport \"../App.css\";\r\n\r\nconst Update = () => {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [albumName, setAlbumName] = useState(\"\");\r\n  const {\r\n    allPicsInDb,\r\n    currentAlbum,\r\n    user,\r\n    resetPicsSelection,\r\n  } = useMainContext();\r\n  const [code, setCode] = useState(\"\");\r\n  const [file, setFile] = useState(false);\r\n\r\n  const confirmFile = (message) => {\r\n    if (message === true) {\r\n      setFile(false);\r\n    } else {\r\n      setFile(true);\r\n    }\r\n  };\r\n\r\n  //Function to update the album\r\n  const updateAlbum = async (id) => {\r\n    const truthy = allPicsInDb.filter((pic) => pic.selected === true);\r\n    const urls = truthy.map((pic) => pic.url);\r\n\r\n    let ranNum;\r\n    ranNum = Math.floor(Math.random() * 10000000);\r\n    await db\r\n      .collection(\"albums\")\r\n      .doc(id)\r\n      .set({\r\n        title: albumName.toLowerCase(),\r\n        cust_apppproved: false,\r\n        url: Math.floor(Math.random() * 200).toString(),\r\n        photo_urls: [...urls],\r\n        code: ranNum,\r\n        user: user.email,\r\n      })\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n        setLoaded(false);\r\n        setCode(ranNum);\r\n        resetPicsSelection();\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n\r\n  //Function to get the album with same title and same user as user\r\n  const checkAlbum = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const selected = allPicsInDb.filter((pic) => pic.selected === true);\r\n\r\n    if (!selected.length) {\r\n      alert(\"You need to upload or select at least 1 pic\");\r\n      return;\r\n    } else {\r\n      let albumToUpdate = [];\r\n      db.collection(\"albums\")\r\n        .where(\"code\", \"==\", currentAlbum.code)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          querySnapshot.forEach((doc) => {\r\n            // doc.data() is never undefined for query doc snapshots\r\n            albumToUpdate.push({ id: doc.id, data: doc.data() });\r\n          });\r\n          setTimeout(() => {\r\n            updateAlbum(albumToUpdate[0].id);\r\n          }, 2000);\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error getting documents: \", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allPicsInDb && allPicsInDb.length) {\r\n      setLoaded(true);\r\n    }\r\n  }, [allPicsInDb]);\r\n\r\n  useEffect(() => {\r\n    setAlbumName(currentAlbum.title);\r\n  }, [currentAlbum]);\r\n\r\n  return (\r\n    <>\r\n      {!code && albumName && loaded && allPicsInDb && (\r\n        <Container>\r\n          <Col lg={10} className=\"my-5 pt-5 mx-auto\">\r\n            <Form className=\"mx-auto form px-5 py-5\" onSubmit={checkAlbum}>\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h2>UPDATE YOUR ALBUM: {albumName.toUpperCase()}</h2>\r\n                </Form.Label>\r\n                <Col lg={12} md={10} className=\"d-flex flex-wrap\">\r\n                  {allPicsInDb &&\r\n                    allPicsInDb.map((pic, index) => {\r\n                      if (pic.selected === true) {\r\n                        return (\r\n                          <Card className=\"ml-3\" id=\"media\" key={index}>\r\n                            <Media key={pic.id} className=\"my-auto\">\r\n                              <img\r\n                                width=\"100%\"\r\n                                height=\"auto\"\r\n                                src={pic.url}\r\n                                alt=\"Generic placeholder\"\r\n                              />\r\n                            </Media>\r\n                          </Card>\r\n                        );\r\n                      }\r\n                    })}\r\n                </Col>\r\n                <UploadImage albumName={albumName} setErrorMsg={confirmFile} />\r\n                <Button className=\"mt-0\" variant=\"primary\" type=\"submit\">\r\n                  Confirm\r\n                </Button>\r\n              </Form.Group>\r\n            </Form>\r\n            {!file && (\r\n              <Alert variant=\"warning\">You haven´t uploaded any pics</Alert>\r\n            )}\r\n          </Col>\r\n        </Container>\r\n      )}\r\n      {!albumName && (\r\n        <div>\r\n          <Alert variant=\"warning\">\r\n            Oops, something went wrong. Please go back to albums\r\n          </Alert>\r\n          <Link to=\"/albums\">\r\n            <p>Go back to albums</p>\r\n          </Link>\r\n        </div>\r\n      )}\r\n      {code && (\r\n        <Alert variant=\"success\">\r\n          <h2>Album succesfully updated!</h2>\r\n          <div>\r\n            The album code for your customer is (copy this link){\" \"}\r\n            <p>\r\n              <a href={`/review/${code}`}>\r\n                <strong>photography.catala-sverdrup.se/review/{code}</strong>\r\n              </a>\r\n            </p>\r\n            <Link to=\"/albums\">\r\n              <p>Go back to albums</p>\r\n            </Link>\r\n          </div>\r\n        </Alert>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Update;\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Albumreview.js",["102","103","104","105","106","107","108","109","110"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { db } from \"../firebase/index\";\r\nimport { useMainContext } from \"../context/MainContext\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Card,\r\n  Media,\r\n  Button,\r\n  Alert,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport IndeterminateCheckBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\r\n\r\nconst Albumreview = () => {\r\n  const [picsLoaded, setLoaded] = useState(false);\r\n  const {\r\n    allPicsInDb,\r\n    allAlbums,\r\n    clientAlbum,\r\n    setClientAlbum,\r\n  } = useMainContext();\r\n  const allPicsFix = useRef([]);\r\n  const navigate = useNavigate();\r\n  const { albumId } = useParams();\r\n  const [alert, setAlert] = useState(false);\r\n  const [userEmail, setUserEmail] = useState(\"\");\r\n  const [loadingToDb, setLoadingtoDb] = useState(\"\");\r\n  const quantity = useRef(0);\r\n\r\n  const selectPic = (url) => {\r\n    let emptyArr;\r\n    emptyArr = [];\r\n    let fullArr;\r\n    fullArr = [];\r\n    fullArr = [...clientAlbum.photo_urls];\r\n\r\n    fullArr.map((photo, index) => {\r\n      if (photo === url || photo.url === url) {\r\n        if (photo.selected) {\r\n          return;\r\n        } else {\r\n          fullArr.splice(index, 1);\r\n          fullArr.push({ url: photo.url ? photo.url : url, selected: true });\r\n          quantity.current += 1;\r\n        }\r\n      }\r\n    });\r\n    if (fullArr.length) {\r\n      setClientAlbum((prev) => {\r\n        return { ...prev, photo_urls: [...fullArr] };\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteSelection = (url) => {\r\n    let emptyArr;\r\n    emptyArr = [];\r\n    let fullArr;\r\n    fullArr = [];\r\n    fullArr = [...clientAlbum.photo_urls];\r\n\r\n    fullArr.map((photo, index) => {\r\n      if (photo === url || photo.url === url) {\r\n        if (!photo.selected) {\r\n          return;\r\n        } else {\r\n          fullArr.splice(index, 1);\r\n          fullArr.push({ url: photo.url, selected: false });\r\n          quantity.current -= 1;\r\n        }\r\n      }\r\n    });\r\n    if (fullArr.length) {\r\n      setClientAlbum((prev) => {\r\n        return { ...prev, photo_urls: [...fullArr] };\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateAlbum = async (id) => {\r\n    let ranNum;\r\n    ranNum = Math.floor(Math.random() * 10000000);\r\n\r\n    let emptyArr;\r\n    emptyArr = [];\r\n    clientAlbum.photo_urls.map((photo) =>\r\n      photo.selected === true ? emptyArr.push(photo.url) : null\r\n    );\r\n\r\n    await db\r\n      .collection(\"albums\")\r\n      .doc(id)\r\n      .set({\r\n        title: clientAlbum.title.toLowerCase(),\r\n        cust_approved: true,\r\n        photo_urls: [...emptyArr],\r\n        code: ranNum,\r\n        user: userEmail,\r\n      })\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n        setLoaded(false);\r\n        setAlert(true);\r\n        setLoadingtoDb(false);\r\n        setTimeout(() => {\r\n          navigate(\"/\");\r\n        }, 2000);\r\n      })\r\n      .catch(function (error) {\r\n        setAlert(true);\r\n        navigate(\"/\");\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n\r\n  const confirmAlbum = async (e) => {\r\n    e.preventDefault();\r\n    setLoaded(false);\r\n    setLoadingtoDb(true);\r\n    if (quantity.current === 0) {\r\n      alert(\"You need to choose at least 1 picture\");\r\n      return;\r\n    }\r\n\r\n    let albumsWithTitle = [];\r\n    let albumToUpdate;\r\n    db.collection(\"albums\")\r\n      .where(\"title\", \"==\", clientAlbum.title.toLowerCase())\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          // doc.data() is never undefined for query doc snapshots\r\n          albumsWithTitle.push({ id: doc.id, data: doc.data() });\r\n          if (albumsWithTitle.length) {\r\n            albumToUpdate = albumsWithTitle.filter(\r\n              (alb) => alb.data.user === userEmail\r\n            );\r\n          }\r\n        });\r\n      })\r\n      .then(() => updateAlbum(albumToUpdate[0].id))\r\n      .catch((error) => {\r\n        console.log(\"Error getting documents: \", error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allPicsInDb && allPicsInDb.length) {\r\n      allPicsFix.current = [...allPicsInDb];\r\n\r\n      setLoaded(true);\r\n    }\r\n  }, [allPicsInDb]);\r\n\r\n  useEffect(() => {\r\n    let emptyObj;\r\n    let emptyUser;\r\n    emptyObj = [];\r\n    emptyUser = \"\";\r\n    setAlert(true);\r\n    allAlbums.map((alb) => {\r\n      if (alb.code === Number(albumId)) {\r\n        emptyObj = { ...alb };\r\n        emptyUser = alb.user;\r\n      }\r\n    });\r\n    if (emptyObj && emptyUser) {\r\n      setClientAlbum(emptyObj);\r\n      setUserEmail(emptyUser);\r\n      setLoaded(true);\r\n      setAlert(false);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {clientAlbum && clientAlbum.photo_urls && !alert ? (\r\n        <Alert variant=\"warning\">\r\n          You have chosen {quantity.current} of {clientAlbum.photo_urls.length}{\" \"}\r\n          photos\r\n        </Alert>\r\n      ) : (\r\n        <Alert variant=\"success\">\r\n          You have successfully sent your pictures to our database\r\n        </Alert>\r\n      )}\r\n      <Container>\r\n        {!alert && !loadingToDb && <h2>{clientAlbum.title}</h2>}\r\n        <Row lg={9} className=\"d-flex mt-5 mx-auto\">\r\n          {picsLoaded &&\r\n            clientAlbum &&\r\n            !alert &&\r\n            clientAlbum.photo_urls &&\r\n            clientAlbum.photo_urls.map((photo, index) => {\r\n              return (\r\n                <Card id=\"media\" key={index}>\r\n                  <Media key={index} className=\"pic my-auto\">\r\n                    <img\r\n                      width=\"100%\"\r\n                      height=\"auto\"\r\n                      src={photo.url ? photo.url : photo}\r\n                      alt=\"Generic placeholder\"\r\n                      className={\r\n                        photo.selected && photo.selected === true\r\n                          ? \"pic-selected\"\r\n                          : \"not-selected\"\r\n                      }\r\n                    />\r\n                  </Media>\r\n                  <div className=\"d-flex mx-auto my-2\">\r\n                    <AddCircleOutlineIcon\r\n                      onClick={() => selectPic(photo)}\r\n                      color=\"primary\"\r\n                    />\r\n                    <IndeterminateCheckBoxIcon\r\n                      onClick={() => deleteSelection(photo)}\r\n                      color=\"secondary\"\r\n                    />\r\n                  </div>\r\n                </Card>\r\n              );\r\n            })}\r\n        </Row>\r\n      </Container>\r\n      {!alert && !loadingToDb && clientAlbum && clientAlbum.photo_urls && (\r\n        <Button onClick={confirmAlbum} className=\"my-3\" variant=\"primary\">\r\n          Confirm and send\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Albumreview;\r\n","C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\hooks\\usePics.js",[],"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\Register.js",[],"C:\\Users\\gcs26\\Documents\\javascript 2\\Amazing photography\\amazing-photography\\src\\components\\EditTitle.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":40,"column":6,"nodeType":"117","endLine":40,"endColumn":8,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":64,"column":31,"nodeType":"121","messageId":"122","endLine":64,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":65,"column":38,"nodeType":"121","messageId":"122","endLine":65,"endColumn":40},{"ruleId":"115","severity":1,"message":"123","line":80,"column":6,"nodeType":"117","endLine":80,"endColumn":20,"suggestions":"124"},{"ruleId":"119","severity":1,"message":"125","line":46,"column":38,"nodeType":"121","messageId":"126","endLine":46,"endColumn":40},{"ruleId":"119","severity":1,"message":"125","line":64,"column":38,"nodeType":"121","messageId":"126","endLine":64,"endColumn":40},{"ruleId":"115","severity":1,"message":"127","line":99,"column":6,"nodeType":"117","endLine":99,"endColumn":8,"suggestions":"128"},{"ruleId":"119","severity":1,"message":"125","line":111,"column":51,"nodeType":"121","messageId":"126","endLine":111,"endColumn":53},{"ruleId":"119","severity":1,"message":"125","line":97,"column":50,"nodeType":"121","messageId":"126","endLine":97,"endColumn":52},{"ruleId":"129","severity":1,"message":"130","line":7,"column":10,"nodeType":"131","messageId":"132","endLine":7,"endColumn":15},{"ruleId":"129","severity":1,"message":"133","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":19},{"ruleId":"115","severity":1,"message":"134","line":14,"column":6,"nodeType":"117","endLine":14,"endColumn":8,"suggestions":"135"},{"ruleId":"115","severity":1,"message":"136","line":72,"column":6,"nodeType":"117","endLine":72,"endColumn":12,"suggestions":"137"},{"ruleId":"119","severity":1,"message":"120","line":23,"column":29,"nodeType":"121","messageId":"122","endLine":23,"endColumn":31},{"ruleId":"138","severity":1,"message":"139","line":24,"column":21,"nodeType":"140","messageId":"141","endLine":24,"endColumn":23},{"ruleId":"115","severity":1,"message":"142","line":56,"column":6,"nodeType":"117","endLine":56,"endColumn":17,"suggestions":"143"},{"ruleId":"115","severity":1,"message":"144","line":63,"column":6,"nodeType":"117","endLine":63,"endColumn":28,"suggestions":"145"},{"ruleId":"119","severity":1,"message":"125","line":82,"column":51,"nodeType":"121","messageId":"126","endLine":82,"endColumn":53},{"ruleId":"119","severity":1,"message":"125","line":77,"column":47,"nodeType":"121","messageId":"126","endLine":77,"endColumn":49},{"ruleId":"119","severity":1,"message":"125","line":117,"column":50,"nodeType":"121","messageId":"126","endLine":117,"endColumn":52},{"ruleId":"129","severity":1,"message":"146","line":13,"column":3,"nodeType":"131","messageId":"132","endLine":13,"endColumn":6},{"ruleId":"129","severity":1,"message":"147","line":36,"column":5,"nodeType":"131","messageId":"132","endLine":36,"endColumn":13},{"ruleId":"119","severity":1,"message":"125","line":41,"column":32,"nodeType":"121","messageId":"126","endLine":41,"endColumn":34},{"ruleId":"119","severity":1,"message":"120","line":44,"column":11,"nodeType":"148","messageId":"149","endLine":44,"endColumn":18},{"ruleId":"129","severity":1,"message":"147","line":61,"column":5,"nodeType":"131","messageId":"132","endLine":61,"endColumn":13},{"ruleId":"119","severity":1,"message":"125","line":66,"column":32,"nodeType":"121","messageId":"126","endLine":66,"endColumn":34},{"ruleId":"119","severity":1,"message":"120","line":69,"column":11,"nodeType":"148","messageId":"149","endLine":69,"endColumn":18},{"ruleId":"119","severity":1,"message":"120","line":165,"column":25,"nodeType":"121","messageId":"122","endLine":165,"endColumn":27},{"ruleId":"115","severity":1,"message":"150","line":177,"column":6,"nodeType":"117","endLine":177,"endColumn":8,"suggestions":"151"},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUser'. Either include it or remove the dependency array.","ArrayExpression",["154"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'allPicsInDb'. Either include it or remove the dependency array.",["155"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'allPicsInDb' and 'resetPicsSelection'. Either include them or remove the dependency array.",["156"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'isSuccess' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setErrorMsg'. Either include it or remove the dependency array. If 'setErrorMsg' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["157"],"React Hook useEffect has missing dependencies: 'albumName', 'allPicsInDb', 'setErrorMsg', and 'user.email'. Either include them or remove the dependency array. If 'setErrorMsg' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["158"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'resetPicsSelection' and 'setCurrentAlbum'. Either include them or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'user.email'. Either include it or remove the dependency array. Mutable values like 'allAlbumsFix.current' aren't valid dependencies because mutating them doesn't re-render the component.",["160"],"'Col' is defined but never used.","'emptyArr' is assigned a value but never used.","ReturnStatement","expectedReturnValue","React Hook useEffect has missing dependencies: 'albumId', 'allAlbums', and 'setClientAlbum'. Either include them or remove the dependency array.",["161"],"no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [setUser]",{"range":"178","text":"179"},"Update the dependencies array to be: [allPicsInDb, currentAlbum]",{"range":"180","text":"181"},"Update the dependencies array to be: [allPicsInDb, resetPicsSelection]",{"range":"182","text":"183"},"Update the dependencies array to be: [setErrorMsg]",{"range":"184","text":"185"},"Update the dependencies array to be: [albumName, allPicsInDb, file, setErrorMsg, user.email]",{"range":"186","text":"187"},"Update the dependencies array to be: [allAlbums, resetPicsSelection, setCurrentAlbum]",{"range":"188","text":"189"},"Update the dependencies array to be: [user.email]",{"range":"190","text":"191"},"Update the dependencies array to be: [albumId, allAlbums, setClientAlbum]",{"range":"192","text":"193"},[1029,1031],"[setUser]",[2092,2106],"[allPicsInDb, currentAlbum]",[2690,2692],"[allPicsInDb, resetPicsSelection]",[521,523],"[setErrorMsg]",[2088,2094],"[albumName, allPicsInDb, file, setErrorMsg, user.email]",[1477,1488],"[allAlbums, resetPicsSelection, setCurrentAlbum]",[1657,1679],"[user.email]",[4691,4693],"[albumId, allAlbums, setClientAlbum]"]